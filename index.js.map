{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;AAAO,SAAS,UAAU,CAAC,OAAe;IACxC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACvB,CAAC;;;;;;;;;;;ACFD;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNmC;AAEI;AAEvC,oDAAU,CAAC,cAAc,CAAC,CAAC;AAE3B,MAAM,kBAAkB,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;AAEjE,uCAAuC;AACvC,MAAM,gBAAgB,GAAG;IACrB,OAAO,EAAE;QACL,MAAM,EAAE,iBAAiB;QACzB,UAAU,EAAE;YACR;gBACI,MAAM,EAAE,UAAU;gBAClB,MAAM,EAAE,OAAO;gBACf,UAAU,EAAE;oBACR;wBACI,MAAM,EAAE,OAAO;wBACf,MAAM,EAAE,aAAa;qBACxB;oBACD;wBACI,MAAM,EAAE,OAAO;wBACf,MAAM,EAAE,eAAe;qBAC1B;iBACJ;aACJ;SAAC;KACL;IACL,IAAI,EAAE;QACJ,QAAQ,EAAE,IAAI;QACd,KAAK,EAAE,IAAI;QACX,UAAU,EAAE,GAAG;QACf,QAAQ,EAAE,CAAC;QACX,QAAQ,EAAE,GAAG;QACb,UAAU,EAAE,GAAG;KAChB;IACD,QAAQ,EAAE,IAAI;CACf,CAAC;AAEJ,IAAI,kBAAkB,EAAE;IACtB,8DAA8D;IAC5D,MAAM,SAAS,GAAG,2CAAc,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;IACvE,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;CACzB","sources":["webpack://blockly-typescript-webpack/./src/example.ts","webpack://blockly-typescript-webpack/external var \"Blockly\"","webpack://blockly-typescript-webpack/webpack/bootstrap","webpack://blockly-typescript-webpack/webpack/runtime/compat get default export","webpack://blockly-typescript-webpack/webpack/runtime/define property getters","webpack://blockly-typescript-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://blockly-typescript-webpack/webpack/runtime/make namespace object","webpack://blockly-typescript-webpack/./src/index.ts"],"sourcesContent":["export function logMessage(message: string) {\r\n  console.log(message);\r\n}","module.exports = Blockly;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as Blockly from 'blockly';\r\n\r\nimport { logMessage } from './example';\r\n\r\nlogMessage('Hello World!');\r\n\r\nconst workspaceContainer = document.getElementById('blocklyDiv');\r\n \r\n// Define the options for the workspace\r\nconst workspaceOptions = {\r\n    toolbox: {\r\n        \"kind\": \"categoryToolbox\",\t\r\n        \"contents\": [\r\n            {\r\n                \"kind\": \"category\",\r\n                \"name\": \"Logic\",\t\r\n                \"contents\": [\r\n                    {\r\n                        \"kind\": \"block\",\r\n                        \"type\": \"controls_if\"\r\n                    },\r\n                    {\r\n                        \"kind\": \"block\",\r\n                        \"type\": \"logic_compare\"\r\n                    },\r\n                ]\r\n            }]\r\n        },\r\n    zoom: {\r\n      controls: true,\r\n      wheel: true,\r\n      startScale: 1.0,\r\n      maxScale: 3,\r\n      minScale: 0.3,\r\n      scaleSpeed: 1.2\r\n    },\r\n    trashcan: true\r\n  };\r\n\r\nif (workspaceContainer) {\r\n  // Create the workspace with the container element and options\r\n    const workspace = Blockly.inject(workspaceContainer, workspaceOptions);\r\n    console.log(workspace)\r\n}"],"names":[],"sourceRoot":""}